#! /usr/bin/env python
#-*- coding:utf-8 -*-
"""物語の生成をマネジメントする

    使用するライブラリ
    *StoryEnum(自作)
        Enumを定義
    *glob
        ディレクトリの数を数える
    *copy
        深いコピー
    *pprint
        listやtupleを見やすくする
    *FileIO(自作)
        文章の保存や、ファイル書き出しなど
    *random
        乱数を生成
"""
from StoryEnum import Story,Const,Generat_const
import glob 
import copy
import pprint
from Select import FileIO as IO
import random
#import lstm_text_generation_bkup0902 as keras_lstm

#----dammy
dammy_index = (99,38,80,44,83,69,88,89,80,37)
dammy_loss = (0.19,0.85,0.67,0.64,0.63,0.38,0.15,0.16,0.09,0.61)
dammy_sentense_path = './data/data_arisu.txt'
dammy_sentense = (
    "0.19\nおうちのまえの木の下には、テーブルが出ていました。そして三月うさぎと帽子屋さんが、そこでお茶してます。ヤマネがそのあいだで、ぐっすりねてました。二人はそれをクッションがわりにつかって、ひじをヤマネにのせてその頭ごしにしゃべっています。「ヤマネはすごくいごこちわるそう。でも、ねてるから、気にしないか」とアリスは思いました。テーブルはとてもおっきいのに、三名はそのかどっこ一つにかたまっていました。「満員、満員！」とアリスがきたのを見て、みんなさけびました。「どこが満員よ、いっぱいあいてるじゃない！」とアリスは怒って、そしてテーブルのはしのおっきなひじかけつきのいすにすわりました。「ワインはいかが」と三月うさぎが親切そうに言います。アリスはテーブル中をみまわしましたが、そこにはお茶しかのってません。「ワインなんかみあたらないけど」とアリス。",
    "0.85\n「だってないもん」と三月うさぎ。「じゃあ、それをすすめるなんて失礼じゃないのよ」とアリスははらをたてました。「しょうたいもなしに勝手にすわって、あんたこそ失礼だよ」と三月うさぎ。キチガイお茶会「あなたのテーブルって知らなかったからよ」とアリス。「三人よりずっとたくさんの用意がしてあるじゃない」「かみの毛、切ったほうがいいよ」帽子屋さんはアリスをすごくものめずらしそうに、ずいぶんながいことジロジロ見ていたのですが、はじめて言ったのがこれでした。「人のこととやかく言っちゃいけないのよ」とアリスは、ちょっときびしく言いました。「すっごくぶさほうなのよ」帽子屋さんは、これをきいて目だまをぎょろりとむきました。が、言ったのはこれだけでした。",
    "0.67\n「大ガラスが書きものづくえと似ているのはなーぜだ？」「わーい、これでおもしろくなるぞ！　なぞなぞをはじめてくれてうれしいな」とアリスは思いました。そして「それならわかると思う」と声に出してつけくわえました。「つまり、そのこたえがわかると思うって意味？」と三月うさぎ。「そのとおり」とアリス。「そんなら、意味どおりのことを言えよ」と三月うさぎはつづけます。",
    "0.64\n「言ってるわよ」アリスはすぐこたえました。「すくなくとも――すくなくとも、言ったとおりのことは意味してるわ――同じことでしょ」「なにが同じなもんか」と帽子屋さん。「それじゃあ『見たものを食べる』ってのと『食べるものを見る』ってのが同じことだと言ってるみたいなもんだ」三月うさぎも追加します。「『もらえるものは好きだ』ってのと『好きなものがもらえる』ってのが同じだ、みたいな！」ヤマネもつけくわえましたが、まるでねごとみたいです。",
    "0.63\n「それって、『ねるときにいきをする』と『いきをするときにねる』が同じだ、みたいな！」「おまえのばあいは同じだろうが」と帽子屋さんがいって、ここでお話がとぎれて、みんなしばらくなにもいわずにすわっていました。アリスは、大ガラスと書きものづくえについて、ありったけ思いだそうとしましたが、大して出てきません。帽子屋さんが、まっ先にちんもくをやぶりました。",
    "0.38\n「きょうって何日？」とアリスにききます。ポケットから時計をとりだして、それを困ったように見ながら、ときどきふったりしては、耳にあてています。アリスはちょっと考えてから言いました。「四日よっか」「二日ふつかもくるってる！」と帽子屋さんはためいきをつきました。そして、怒って三月うさぎをにらみつけました。「だからバターじゃダメだって言ったじゃねぇか！」「最高のバターだったんだぜ」と三月うさぎは力なくこたえました。",
    "0.15\n「おぅ、でもパンくずがいっしょに入っちまったにちげえねぇ」と帽子屋さんはもんくをたれます。「おめぇがパンきりナイフなんかつかいやがるから」三月うさぎは時計をうけとると、しょんぼりとそれをながめます。それからそれを自分のお茶にひたしてみてから、またながめました。でも、最初のせりふ以上のものはおもいつきませんでした。「最高のバターだったんだぜ」アリスは興味きょうみしんしんで、そのかたごしにながめていました。",
    "0.16\n「ずいぶんへんな時計ね！　何日かわかるけど、何時かはわからないなんて！」「そんなのわかってもしょうがねぇだろ」と帽子屋さん。「あんたの時計は、いまが何年かわかるのかぃ、え？」「もちろんわかんないけど」とアリスは自信たっぷりにこたえます。「でもそれは、年ってかなりずっと長いことおんなじままだからよ」「おれの場合もまさにおんなしこった」と帽子屋さん。アリスはものすごく頭がこんがらがってきました。帽子屋さんの言ったことは、まるでなんの意味もないようですが、でもちゃんと文にはなってるのです。",
    "0.09\n「どうもよくわからないみたいです」とアリスは、できるだけていねいに言いました。「ヤマネのやろう、またねてやがる」と帽子屋さんは、ヤマネの鼻ヅラにちょっとあついお茶をかけました。ヤマネはあわてて頭をふると、目をあけずにいいました。「いや、まったくまったく。おれもそう言おうと思ってたところ」「なぞなぞはわかったかよ」と帽子屋さんは、またアリスに話しかけました。「だめ、こうさん。こたえはなに？」とアリスはこたえました。",
    "0.61\n「さっぱり見当もつかない」と帽子屋さん。「わしも」と三月うさぎ。アリスはうんざりしてため息をつきました。「もう少しましに時間をつかったら？　それを、答のないなぞなぞなんか聞いて、むだにしたりして」「おれくらい時間と仲がよけりゃ、それをむだにするなんて言い方はせんね。やつだよ」「なんのことやらさっぱり」とアリス。「そりゃあんたにゃわかるめぇよ！」と帽子屋さんは、バカにしたようにみえをきりました。「どうせ、時間と口きぃたこともねぇんだろ！」「ないかも」とアリスはしんちょうに答えます。")



io_ = IO()#入出力系インスタンス

def get_file_count(top=False):
    """ファイルの残量を管理する

    Args:
        top(bool):先頭のタプルのみ取得するか　デフォルトではFalse

    Return:

        False--tuple:[index][x] x--0:残量,1:Enum
        True --Enum:先頭のストーリー
    """
    matrix = [0 for _ in range(len(Story))]#マトリックス初期化
    enum_count = 0 #ストーリーリストのカウント　マトリックスの添え字
    for enum in Story:
        #tmp = (len(glob.glob(enum.value[Const.PATH]+"\\*")),enum)
        tmp = (len(glob.glob(enum.value[Const.OUT_PATH]+"/*.txt")),enum)
        matrix[enum_count]=copy.deepcopy(tmp)
        enum_count += 1
    #マトリックスに格納
    matrix =sorted(matrix,key=lambda x:x[0])#ソートする
    return (tuple(matrix) if top is False else tuple(matrix)[0])

def generation(story):
    """生成する

    Args:

        story(enum):生成する題目
    """

    for _ in range(Generat_const.EPOCH):
        #---dammy---#
        r = random.randint(0,len(dammy_index)-1)
        io_.save_text(dammy_loss[r],dammy_index[r],dammy_sentense[r])
        #io_.save_text(keras_lstm.loss,1,keras_lstm.sentences_)
    print(story,"---学習完了\n")
    

def out(story):
    """書き出す

    Args:

        story(enum):生成する題目

    """
    io_.output(story)

def is_generation(min_story):
    """生成するか

    Args:

        min_story(int):一番すくない残量の題目のファイル数

    Return:

        bool:実残量が、生成最大量未満か
             True --生成する
             False--生成しない
    """
    return get_file_count(True)[0] < Const.GENERAT_MAX
def run():
    """ファイルを監視し、必要量テキストを生成する
    """
    while True:
        story_tpl = get_file_count(True)

        story = story_tpl[1]#1はenum 0は残量
        #生成する題目を格納
        min_story = story_tpl[0]
        #ファイル数を格納
        if not is_generation(min_story):#
            continue
        generation(story)
        out(story)   #ファイル書き出し
        pprint.pprint(get_file_count())
        print("--------------------")
        print(story,"\t","書き出し完了\n")
        
        #print(story)
        
run()
        
